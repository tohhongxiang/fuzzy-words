{"version":3,"sources":["components/WordSimilarityCalculator/WordInput.module.css","components/WordSimilarityCalculator/functions/levenshtein.js","components/WordSimilarityCalculator/functions/trigram.js","components/WordSimilarityCalculator/functions/cosine.js","components/WordSimilarityCalculator/functions/jaro.js","components/WordSimilarityCalculator/functions/jaroWinkler.js","components/WordSimilarityCalculator/functions/hamming.js","components/WordSimilarityCalculator/PresentationTable.jsx","components/WordSimilarityCalculator/WordInput.jsx","index.js","App.js"],"names":["module","exports","calculateLevenShtein","word1","word1Length","word2","word2Length","cost","Math","min","generateTrigrams","word","trigrams","paddedWord","i","length","push","slice","trigram","trigrams1","trigrams2","total","filter","item","ar","indexOf","matching","trigram1","generateVector","uniqueTokens","vector","freqDict","dict","split","forEach","letter","word2freqDict","Object","keys","magnitude","sqrt","cosine","uniqueLetters","getAllUniqueTokens","vector1","vector2","NaN","dot","jaro","letters1","letters2","m","t","maxDist","floor","max","assignedIndexes1","assignedIndexes2","currentLetter","positionOfLetterInOtherWord","abs","sort","a","b","matchingLetters1","map","index","matchingLetters2","s1","s2","jaroWinkler","jaroDistance","l","hamming","dist","PresentationTable","headers","results","title","key","result","algorithm","toString","WordInput","useState","setWord1","setWord2","levenshteinDistance","trigramSimilarity","cosineSimilarity","jaroSimilarity","jaroWinklerSimilarity","hammingDistance","similarity","setSimilarity","handleChange","name","e","target","value","useEffect","timeOutHandler","setTimeout","calculateTrigramSimilarity","calculateCosineSimilarity","calculateJaroSimilarity","calculateJaroWinklerSimilarity","calculateHammingDistance","clearTimeout","entries","round","className","styles","root","flex","onChange","placeholder","input","tableContainer","presentationTable","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d586f028.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"WordInput_flex__2DtGv\",\"headers\":\"WordInput_headers__3Lduc\",\"input\":\"WordInput_input__2Lcuo\",\"tableContainer\":\"WordInput_tableContainer__3yuZQ\",\"root\":\"WordInput_root__1TJAe\"};","function calculateLevenShtein(word1, word1Length, word2, word2Length) {\n    if (word1Length === 0) return word2Length\n    if (word2Length === 0) return word1Length\n\n    let cost;\n    if (word1[word1Length - 1] === word2[word2Length - 1]) {\n        cost = 0;\n    } else {\n        cost = 1;\n    }\n\n    return Math.min(\n        calculateLevenShtein(word1, word1Length - 1, word2, word2Length) + 1,\n        calculateLevenShtein(word1, word1Length, word2, word2Length - 1) + 1,\n        calculateLevenShtein(word1, word1Length - 1, word2, word2Length - 1) + cost\n    )\n}\n\nexport default calculateLevenShtein","/**\n * From 2 words, pad each word with _ in front and behind\n * Generate trigrams from new word\n * Count the total number of unique trigrams (Total)\n * Count the number of trigrams which appear in both word 1 and word 2 (Matching)\n * Return matching/total\n * @param {string} word1 \n * @param {string} word2 \n */\nfunction trigram(word1, word2) {\n    const trigrams1 = generateTrigrams(word1)\n    const trigrams2 = generateTrigrams(word2)\n\n    const uniqueTrigrams = getUnique([...trigrams1, ...trigrams2])\n\n    let total = uniqueTrigrams.length;\n    let matching = 0;\n\n    for (let trigram1 of trigrams1) {\n        for (let trigram2 of trigrams2) {\n            if (trigram1 === trigram2) matching++\n        }\n    }\n\n    return matching/total\n}\n\nfunction generateTrigrams(word) {\n    const trigrams = []\n    const paddedWord = '_' + word + '_'\n    for (let i = 0; i < paddedWord.length - 2; i++) {\n        trigrams.push(paddedWord.slice(i, i + 3))\n    }\n\n    return trigrams\n}\n\nfunction getUnique(a) {\n    return a.filter((item, i, ar) => ar.indexOf(item) === i);\n}\n\nexport default trigram","function cosine(word1, word2) {\n    const uniqueTokens = getAllUniqueTokens(word1, word2)\n\n    const vector1 = generateVector(uniqueTokens, word1)\n    const vector2 = generateVector(uniqueTokens, word2)\n\n    const angle = dot(vector1, vector2)/(magnitude(vector1)*magnitude(vector2))\n    return angle\n}\n\n/**\n * Converts a word into a frequency dictionary\n * @param {string} word \n * @return {Object} freqDict\n * @example word2freqDict('aabc') = {a: 2, b: 1, c: 1}\n */\nfunction word2freqDict(word) {\n    const dict = {}\n    const letters = word.split('')\n    letters.forEach(letter => {\n        if (dict[letter]) {\n            dict[letter] += 1\n        } else {\n            dict[letter] = 1\n        }\n    })\n\n    return dict\n}\n\n/**\n * Gets all the unique letters from 2 words\n * @param {string} word1 \n * @param {string} word2 \n * @returns {Object} uniqueLetters\n * @example getAllUniqueTokens('aabc', 'cccd') = {a: true, b: true, c: true, d: true}\n */\nfunction getAllUniqueTokens(word1, word2) {\n    const uniqueLetters = {}\n    for (const letter of word1) {\n        uniqueLetters[letter] = true\n    }\n    for (const letter of word2) {\n        uniqueLetters[letter] = true\n    }\n    return uniqueLetters\n}\n\n/**\n * Generates a vector from a uniqueTokens dict and a string\n * @param {Object} uniqueTokens \n * @param {string} word \n * @return {Array} vector\n * @example generateVector({a: true, b: true, c: true, d: true}, 'aacd') = [2, 0, 1, 1]\n */\nfunction generateVector(uniqueTokens, word) {\n    const vector = []\n    const freqDict = word2freqDict(word)\n    for (const letter of Object.keys(uniqueTokens)) {\n        vector.push(freqDict[letter] || 0)\n    }\n\n    return vector\n}\n\nfunction dot(vector1, vector2) {\n    if (vector1.length !== vector2.length) return NaN\n    let total = 0\n    for (let i = 0; i < vector1.length; i++) {\n        total += vector1[i]*vector2[i]\n    }\n\n    return total\n}\n\nfunction magnitude(vector) {\n    let total = 0\n    for (let i = 0; i < vector.length; i++) {\n        total += vector[i]*vector[i]\n    }\n\n    return Math.sqrt(total)\n}\n\nexport default cosine","function jaro(word1, word2) {\n    // turn words into array\n    const letters1 = word1.split('')\n    const letters2 = word2.split('')\n\n    let m = 0;\n    let t = 0;\n    const maxDist = Math.floor(Math.max(letters1.length, letters2.length)/2) - 1 // the furthest distance that a character in 1 word can be from a character in the other word\n    // if 2 characters match, we will place them into these 2 arrays\n    let assignedIndexes1 = []\n    let assignedIndexes2 = []\n\n    for (let i = 0; i < letters1.length; i++) {\n        const currentLetter = letters1[i]\n        const positionOfLetterInOtherWord = letters2.indexOf(currentLetter, Math.max(0, i - maxDist))\n        if (positionOfLetterInOtherWord !== -1 && Math.abs(i - positionOfLetterInOtherWord) <= maxDist) { // if the letter is not further than the max distance away\n            m++\n            assignedIndexes1.push(i)\n            assignedIndexes2.push(positionOfLetterInOtherWord)\n        }\n    }\n\n    // sort assigned indexes in increasing order\n    assignedIndexes1.sort((a, b) => a < b ? -1 : a > b ? 1 : 0)\n    assignedIndexes2.sort((a, b) => a < b ? -1 : a > b ? 1 : 0)\n\n    // turn them back into letters\n    const matchingLetters1 = assignedIndexes1.map(index => letters1[index])\n    const matchingLetters2 = assignedIndexes2.map(index => letters2[index])\n\n    // if the positions are not the same, add 1 to t\n    for (let i = 0; i < Math.min(matchingLetters1.length, matchingLetters2.length); i++) {\n        if (matchingLetters1[i] !== matchingLetters2[i]) t++\n    }\n\n    t /= 2;\n\n    const s1 = letters1.length\n    const s2 = letters2.length\n\n    if (m === 0) return 0\n    return (1/3)*(m/s1 + m/s2 + (m-t)/m)\n}\n\nexport default jaro","import jaro from './jaro'\n\nfunction jaroWinkler(word1, word2) {\n    let jaroDistance = jaro(word1, word2)\n    const p = 0.1 // scaling distance\n\n    let l = 0;\n    // l is the length of common prefix at the start of the string up to a max of 4 characters\n    for (let i = 0; i < Math.min(word1.length, word2.length, 4); i++) {\n        if (word1[i] === word2[i]) {\n            l++\n        } else {\n            break\n        }\n    }\n\n    return jaroDistance + l*p*(1 - jaroDistance)\n}\n\nexport default jaroWinkler","function hamming(word1, word2) {\n    if (word1.length !== word2.length) {\n        return NaN\n    } \n\n    let dist = 0;\n    for (let i = 0; i < word1.length; i++) {\n        if (word1[i] !== word2[i])  dist++\n    }\n\n    return dist\n}\n\nexport default hamming","import React from 'react'\n\nexport default function PresentationTable({headers, results}) {\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>{headers.map(title => <th key={title}>{title}</th>)}</tr>\n                </thead>\n                <tbody>\n                    {results ? results.map(result => (\n                        <tr key={result.algorithm}>\n                            <td>{result.algorithm}</td>\n                            <td>{result.result.toString()}</td>\n                        </tr>\n                    )) : null}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport styles from './WordInput.module.css'\nimport calculateLevenShtein from './functions/levenshtein'\nimport calculateTrigramSimilarity from './functions/trigram'\nimport calculateCosineSimilarity from './functions/cosine'\nimport calculateJaroSimilarity from './functions/jaro'\nimport calculateJaroWinklerSimilarity from './functions/jaroWinkler'\nimport calculateHammingDistance from './functions/hamming'\nimport PresentationTable from './PresentationTable'\n\nexport default function WordInput() {\n    const [word1, setWord1] = useState('')\n    const [word2, setWord2] = useState('')\n\n    const [similarity, setSimilarity] = useState({\n        levenshteinDistance: 0,\n        trigramSimilarity: 0,\n        cosineSimilarity: 0,\n        jaroSimilarity: 0,\n        jaroWinklerSimilarity: 0,\n        hammingDistance: 0\n    })\n\n    const handleChange = name => e => {\n        switch(name) {\n            case 'word1':\n                setWord1(e.target.value)\n                break\n            case 'word2':\n                setWord2(e.target.value)\n                break\n            default:\n                break\n        }\n    }\n\n    useEffect(() => {\n        let timeOutHandler = setTimeout(() => {\n            const levenshteinDistance = calculateLevenShtein(word1, word1.length, word2, word2.length)\n            const trigramSimilarity = calculateTrigramSimilarity(word1, word2)\n            const cosineSimilarity = calculateCosineSimilarity(word1, word2)\n            const jaroSimilarity = calculateJaroSimilarity(word1, word2)\n            const jaroWinklerSimilarity = calculateJaroWinklerSimilarity(word1, word2)\n            const hammingDistance = calculateHammingDistance(word1, word2)\n\n            setSimilarity({\n                levenshteinDistance, \n                trigramSimilarity, \n                cosineSimilarity, \n                jaroSimilarity, \n                jaroWinklerSimilarity,\n                hammingDistance\n            })\n        }, 1000) \n        \n        return () => clearTimeout(timeOutHandler)\n    }, [word1, word2])\n\n    const results = Object.entries(similarity).map(([key, value]) => ({algorithm: key, result: Math.round(value*10000)/10000}))\n    return (\n        <div className={styles.root}>\n            <header className={styles.headers}>\n                <h1>Word Similarity Algorithms</h1>\n            </header>\n            <div className={styles.flex}>\n                <input value={word1} onChange={handleChange('word1')} placeholder={\"Text 1\"} className={styles.input}/>\n                <input value={word2} onChange={handleChange('word2')} placeholder={\"Text 2\"} className={styles.input}/>\n            </div>\n            <div className={styles.tableContainer}>\n                <PresentationTable headers={['Algorithm', 'Result']} results={results} className={styles.presentationTable}/>\n            </div>\n        </div>\n    )\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\nReactDOM.render(<App />, document.querySelector('#root'))","import React from 'react'\nimport WordInput from './components/WordSimilarityCalculator/WordInput'\nimport './App.css'\n\nexport default function App() {\n    return (\n        <div>\n            <WordInput />\n        </div>\n    )\n}\n"],"sourceRoot":""}